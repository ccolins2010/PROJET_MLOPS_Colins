import streamlit as st
import pandas as pd
import joblib, json, sklearn
from pathlib import Path
from datetime import datetime

st.set_page_config(page_title="Risque cr√©dit - PD", page_icon="üìä", layout="centered")

# =========================================================
# 0) Ent√™te p√©dagogique
# =========================================================
st.title("√âvaluation du risque cr√©dit : probabilit√© de d√©faut de paiement par client")
st.caption("Application acad√©mique : estimation de la probabilit√© de d√©faut √† partir des caract√©ristiques du client.")

st.divider()

# =========================================================
# 1) Artefacts (mod√®le + m√©triques)
# =========================================================
ART = Path("artifacts")
MODEL_PATH = ART / "logistic_regression_final.joblib"    # <- meilleur mod√®le s√©lectionn√© en 4.6
METRICS_PATH = ART / "best_model_metrics.json"

# Charger m√©triques (si dispo)
metrics = {}
if METRICS_PATH.exists():
    metrics = json.loads(METRICS_PATH.read_text())
else:
    st.warning("Fichier des m√©triques introuvable : artifacts/best_model_metrics.json")

# Charger mod√®le avec cache
@st.cache_resource
def load_model(path: Path):
    return joblib.load(path)

model = None
if MODEL_PATH.exists():
    try:
        model = load_model(MODEL_PATH)
    except Exception as e:
        st.error(f"Erreur au chargement du mod√®le : {e}")
else:
    st.error(f"Mod√®le introuvable : {MODEL_PATH}. Ex√©cute la section 4.6 d‚Äôexport dans le notebook.")

# Panneau d‚Äôinfos techniques (repliable)
with st.expander("‚ÑπÔ∏è Informations mod√®le (cliquer pour afficher)"):
    st.markdown(f"**Mod√®le utilis√© :** `{MODEL_PATH.name if MODEL_PATH.exists() else '‚Äî'}`")
    if metrics:
        st.markdown(
            f"- **ROC-AUC (test)** : {metrics.get('roc_auc', 0):.3f}  \n"
            f"- **PR-AUC (test)**  : {metrics.get('pr_auc', 0):.3f}  \n"
            f"- **Brier score**    : {metrics.get('brier', 0):.3f}  \n"
            f"- **Accuracy**       : {metrics.get('accuracy', 0):.3%}"
        )
    st.markdown(f"- **sklearn (inference)** : `{sklearn.__version__}`")
    st.markdown(f"- **Date d‚Äôex√©cution** : {datetime.now().strftime('%Y-%m-%d %H:%M')}")

st.divider()

# =========================================================
# 2) Aides / d√©finitions
# =========================================================
st.markdown(
    "Analysez le profil de chaque client pour **anticiper le risque de d√©faut** et "
    "prendre des **d√©cisions de cr√©dit √©clair√©es**."
)

st.divider()

# =========================================================
# 3) Fonctions utilitaires (verdict + recommandation + format ‚Ç¨)
# =========================================================
def fmt_eur(x: float) -> str:
    """Format 10000 -> 10 000 ‚Ç¨, 123456 -> 123 456 ‚Ç¨."""
    return f"{x:,.0f} ‚Ç¨".replace(",", " ").replace(".", ",")

def verdict_message(pd_value: float, threshold: float):
    """
    Retourne un niveau lisible + une recommandation m√©tier.
    Les bornes sont indicatives (√† adapter √† vos politiques de risque).
    """
    if pd_value < 0.10:
        level = "Faible"
        advice = "Accepter le cr√©dit (conditions standard)."
    elif pd_value < 0.30:
        level = "Mod√©r√©"
        advice = "Accepter sous conditions (limite d‚Äôendettement / stabilit√© des revenus)."
    elif pd_value < threshold:
        level = "√âlev√© (mais < seuil)"
        advice = "√âtudier des garanties ou r√©duire le montant."
    else:
        level = "Tr√®s √©lev√© (‚â• seuil)"
        advice = "Demander des garanties fortes ou refuser."
    return level, advice

# =========================================================
# 4) Score unitaire (formulaire)
# =========================================================
st.subheader("Score unitaire")

col1, col2 = st.columns(2)
with col1:
    credit_lines_outstanding = st.number_input(
        "Lignes de cr√©dit actives",
        min_value=0, step=1, value=1,
        help="Nombre de lignes de cr√©dit actuellement ouvertes pour le client."
    )
    loan_amt_outstanding = st.number_input(
        "Montant du pr√™t en cours (‚Ç¨)",
        min_value=0.0, step=100.0, value=3000.0,
        help="Montant du pr√™t cibl√© encore √† rembourser."
    )
    total_debt_outstanding = st.number_input(
        "Dette totale (‚Ç¨)",
        min_value=0.0, step=100.0, value=8000.0,
        help="Somme de toutes les dettes du client (tous cr√©dits confondus)."
    )
with col2:
    income = st.number_input(
        "Revenu annuel (‚Ç¨)",
        min_value=0.0, step=100.0, value=60000.0,
        help="Revenu brut annuel estim√© du client."
    )
    years_employed = st.number_input(
        "Anciennet√© (ann√©es)",
        min_value=0, step=1, value=5,
        help="Nombre d'ann√©es d'emploi du client."
    )
    fico_score = st.number_input(
        "Score FICO (300‚Äì850)",
        min_value=300, max_value=850, step=1, value=640,
        help="Indicateur de solvabilit√© (plus √©lev√© = plus fiable)."
    )

theta = st.slider(
    "Seuil d√©cisionnel (Œ∏)",
    0.05, 0.95, 0.50, 0.01,
    help="Au-dessus du seuil ‚Üí Risque √©lev√©. En dessous ‚Üí Fiable. Ajuster selon le co√ªt FP/FN."
)

if st.button("‚öôÔ∏è Pr√©dire la probabilit√© de d√©faut (PD)"):
    if model is None:
        st.error("Mod√®le non charg√©. V√©rifie les artefacts ou les versions de librairies.")
    else:
        X = pd.DataFrame([{
            "credit_lines_outstanding": credit_lines_outstanding,
            "loan_amt_outstanding": loan_amt_outstanding,
            "total_debt_outstanding": total_debt_outstanding,
            "income": income,
            "years_employed": years_employed,
            "fico_score": fico_score
        }])
        pd_hat = float(model.predict_proba(X)[:, 1])
        verdict_is_risk = (pd_hat >= theta)

        # Indicateur principal
        st.metric("Probabilit√© de d√©faut (PD)", f"{pd_hat:.2%}")

        # Niveau + recommandation (plus parlant)
        niveau, reco = verdict_message(pd_hat, theta)

        # Badge color√© + phrase compl√®te
        if verdict_is_risk:
            st.markdown(
                "<div style='padding:10px;border-radius:8px;background:#ffe6e6;color:#a80000;font-weight:600;'>"
                f"‚ùå Verdict : Risque √©lev√© ‚Äî PD = {pd_hat:.2%} (niveau : {niveau}). "
                f"**D√©cision sugg√©r√©e : {reco}**"
                "</div>",
                unsafe_allow_html=True
            )
        else:
            st.markdown(
                "<div style='padding:10px;border-radius:8px;background:#e9f7ef;color:#1e7e34;font-weight:600;'>"
                f"‚úÖ Verdict : Fiable ‚Äî PD = {pd_hat:.2%} (niveau : {niveau}). "
                f"**D√©cision sugg√©r√©e : {reco}**"
                "</div>",
                unsafe_allow_html=True
            )

        # Rappel des entr√©es (lisible)
        with st.expander("D√©tails de la saisie"):
            st.write({
                "Lignes de cr√©dit actives": credit_lines_outstanding,
                "Montant du pr√™t en cours": fmt_eur(loan_amt_outstanding),
                "Dette totale": fmt_eur(total_debt_outstanding),
                "Revenu annuel": fmt_eur(income),
                "Anciennet√© (ann√©es)": years_employed,
                "Score FICO": fico_score,
                "Seuil (Œ∏)": round(theta, 2),
            })

st.divider()

# =========================================================
# 5) Scoring par lot (CSV) ‚Äî version avec "Comment √ßa marche ?"
# =========================================================
st.subheader("Scoring par lot (CSV)")

st.markdown(
    "#### Comment √ßa marche ?\n"
    "1. **T√©l√©chargez le mod√®le de CSV** ci-dessous et remplissez-le avec vos clients.\n"
    "2. **Importez** le fichier via le bouton.\n"
    "3. L‚Äôapp calcule **PD** + **verdict** pour chaque ligne.\n"
    "4. **T√©l√©chargez** le fichier enrichi pour vos d√©cisions."
)

# Option : colonnes explicatives (d√©sactiv√© par d√©faut)
show_explanatory = st.checkbox(
    "Ajouter des colonnes explicatives (niveau de risque, recommandation)",
    value=False
)

# CSV mod√®le t√©l√©chargeable
sample = pd.DataFrame([{
    "credit_lines_outstanding": 1,
    "loan_amt_outstanding": 3500,
    "total_debt_outstanding": 9000,
    "income": 65000,
    "years_employed": 4,
    "fico_score": 630
}])
st.download_button(
    "‚¨áÔ∏è T√©l√©charger un CSV mod√®le",
    sample.to_csv(index=False).encode("utf-8"),
    "modele_clients.csv",
    "text/csv"
)

# Uploader
file = st.file_uploader("Importer un CSV", type=["csv"])
required = [
    "credit_lines_outstanding",
    "loan_amt_outstanding",
    "total_debt_outstanding",
    "income",
    "years_employed",
    "fico_score",
]

if file:
    if model is None:
        st.error("Mod√®le non charg√©. Impossible de scorer le CSV.")
    else:
        try:
            df = pd.read_csv(file)
        except Exception as e:
            st.error(f"Erreur de lecture du CSV : {e}")
            df = None

        if df is not None:
            missing = [c for c in required if c not in df.columns]
            if missing:
                st.error(f"Colonnes manquantes : {missing}")
            else:
                out = df.copy()
                # Colonnes de base (applique aussi le seuil Œ∏ choisi dans l'UI)
                out["pd"] = model.predict_proba(out[required])[:, 1]
                out["verdict"] = (out["pd"] >= theta).map({True: "Risque √©lev√©", False: "Fiable"})

                # Colonnes explicatives optionnelles (lisibilit√© m√©tier)
                if show_explanatory:
                    niveaux, recos = [], []
                    for p in out["pd"].tolist():
                        lvl, rc = verdict_message(p, theta)  # r√©utilise ta fonction d√©finie plus haut
                        niveaux.append(lvl)
                        recos.append(rc)
                    out["niveau_risque"] = niveaux
                    out["recommandation"] = recos

                st.dataframe(out.head(20), use_container_width=True)
                st.download_button(
                    "üíæ T√©l√©charger les r√©sultats (CSV)",
                    out.to_csv(index=False).encode("utf-8"),
                    "predictions.csv",
                    "text/csv"
                )



# =========================================================
# 6) Pied de page
# =========================================================
st.divider()
st.markdown("üë§ **Auteur :** Colins DONGMO ‚Äî Master Data Science")
