name: Deploy Streamlit to ECS (Paris)

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: loan-default-pd-colins           # <- ton repo ECR
  ECS_CLUSTER: loan-default-pd-cluster             # <- ton cluster ECS
  ECS_SERVICE: loan-default-pd-service             # <- ton service ECS

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (optionnel) crée le repo ECR s'il n'existe pas
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY" >/dev/null

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image to ECR (:latest + :sha)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_SHA: ${{ github.sha }}
        run: |
          IMAGE_BASE="$ECR_REGISTRY/$ECR_REPOSITORY"
          docker build -t "$IMAGE_BASE:latest" -t "$IMAGE_BASE:${IMAGE_SHA::7}" .
          docker push "$IMAGE_BASE:latest"
          docker push "$IMAGE_BASE:${IMAGE_SHA::7}"
          echo "image_latest=$IMAGE_BASE:latest" >> $GITHUB_OUTPUT

      # IMPORTANT : on redéploie le service (la task def pointe sur :latest)
      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
