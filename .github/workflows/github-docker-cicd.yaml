name: CI/CD ‚Äì Docker Hub (Loan Default PD) - Colins

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# üîê Secrets requis (Settings > Secrets and variables > Actions)
# - DOCKER_USER       : ton identifiant Docker Hub
# - DOCKER_PASSWORD   : ton token/mot de passe Docker Hub
# - REPO_NAME         : nom du repo Docker Hub (ex: loan-default-pd)

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REPO_NAME: ${{ secrets.REPO_NAME }}

jobs:

  # =========================
  # CI : v√©rifications de base
  # =========================
  ci_pipeline:
    runs-on: ubuntu-latest

    steps:
      # R√©cup√©ration du code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Version de Python align√©e avec ton app (sklearn==1.5.1)
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      # Installation des d√©pendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # (Optionnel) Formatage rapide
      - name: Format (black)
        run: |
          pip install black
          black --check app.py || (echo "Formatting issues found (non-blocking)"; exit 0)

      # (Optionnel) Linting l√©ger
      - name: Lint (pylint)
        run: |
          pip install pylint
          pylint --disable=R,C app.py || (echo "Lint warnings (non-blocking)"; exit 0)

      # ‚úÖ Smoke test : on charge le mod√®le et on fait une pr√©diction
      - name: Smoke test ‚Äì charger le mod√®le et scorer 1 ligne
        run: |
          python - <<'PY'
          from pathlib import Path
          import pandas as pd
          import joblib

          art = Path("artifacts")
          model_path = art / "logistic_regression_final.joblib"
          assert model_path.exists(), f"Fichier manquant: {model_path}"
          model = joblib.load(model_path)

          X = pd.DataFrame([{
              "credit_lines_outstanding": 1,
              "loan_amt_outstanding": 3500,
              "total_debt_outstanding": 9000,
              "income": 65000,
              "years_employed": 4,
              "fico_score": 630
          }])
          proba = float(model.predict_proba(X)[:, 1])
          assert 0.0 <= proba <= 1.0, "La probabilit√© doit √™tre dans [0,1]"
          print(f"Smoke OK ‚Äì PD={proba:.4f}")
          PY

  # ==========================================
  # CD : build & push Docker Hub (si CI OK)
  # ==========================================
  cd_pipeline:
    runs-on: ubuntu-latest
    needs: [ ci_pipeline ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Connexion s√©curis√©e √† Docker Hub
      - name: Docker login
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USER}" --password-stdin

      # Tags utiles : date lisible + sha court
      - name: Prepare tags
        id: vars
        run: |
          echo "DATE=$(date +'%Y-%m-%d--%H-%M-%S')" >> $GITHUB_ENV
          echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Build with multi-tags
      - name: Build image
        run: |
          IMAGE="${DOCKER_USER}/${REPO_NAME}"
          docker build . \
            -t ${IMAGE}:latest \
            -t ${IMAGE}:${{ env.DATE }} \
            -t ${IMAGE}:${{ env.SHA_SHORT }}

      # Push tous les tags
      - name: Push image
        run: |
          IMAGE="${DOCKER_USER}/${REPO_NAME}"
          docker push ${IMAGE}:latest
          docker push ${IMAGE}:${{ env.DATE }}
          docker push ${IMAGE}:${{ env.SHA_SHORT }}
